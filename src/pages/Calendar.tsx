
import { useEffect, useState } from "react";
import Navbar from "@/components/Navbar";
import CalendarView from "@/components/calendar";
import { Toaster } from "@/components/ui/toaster";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import EventForm from "@/components/calendar/EventForm";
import { useCalendarEvents } from "@/hooks/useCalendarEvents";
import useAuth from "@/hooks/useAuth";

const CalendarPage = () => {
  const [openAddEvent, setOpenAddEvent] = useState(false);
  const { createEvent, isPending } = useCalendarEvents();
  const { user } = useAuth();

  useEffect(() => {
    // Set page title
    document.title = "Calendar | Famacle";
  }, []);

  const handleCreateEvent = (formData: any) => {
    if (!user?.id) {
      console.error("User ID not found");
      return;
    }
    
    // Calculate start and end dates based on form data
    const startDate = new Date(
      formData.date.getFullYear(),
      formData.date.getMonth(),
      formData.date.getDate(),
      formData.allDay ? 0 : parseInt(formData.startTime.split(':')[0]),
      formData.allDay ? 0 : parseInt(formData.startTime.split(':')[1])
    );
    
    const endDate = formData.allDay 
      ? null 
      : new Date(
          formData.date.getFullYear(),
          formData.date.getMonth(),
          formData.date.getDate(),
          parseInt(formData.endTime.split(':')[0]),
          parseInt(formData.endTime.split(':')[1])
        );
    
    // Prepare reminders if enabled
    const reminders = [];
    if (formData.reminder) {
      const reminderMinutes = parseInt(formData.reminderTime);
      const reminderTime = new Date(startDate.getTime() - (reminderMinutes * 60 * 1000));
      
      reminders.push({
        id: '', // Will be generated by backend
        time: reminderTime.toISOString(),
        type: formData.reminderType,
        sent: false
      });
    }
    
    const newEvent = {
      title: formData.title,
      description: formData.description,
      startDate: startDate.toISOString(),
      endDate: endDate ? endDate.toISOString() : null,
      allDay: formData.allDay,
      location: formData.location,
      priority: formData.priority,
      recurring: formData.isRecurring ? {
        type: formData.recurrenceType,
        endsOn: formData.recurrenceEndsOn ? formData.recurrenceEndsOn.toISOString() : null
      } : null,
      reminders: reminders
    };

    createEvent(newEvent, user.id);
    setOpenAddEvent(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-white to-gray-50">
      <Navbar />
      <main className="container mx-auto px-4 pt-24 pb-12 max-w-6xl">
        <div className="animate-fade-in">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h1 className="text-3xl font-bold text-famacle-slate">Calendar</h1>
              <p className="text-gray-500 mt-1">Manage your family's schedule and activities</p>
            </div>
            <Button 
              onClick={() => setOpenAddEvent(true)}
              className="bg-famacle-blue hover:bg-famacle-blue/90"
            >
              <Plus className="mr-1 h-4 w-4" />
              Add Event
            </Button>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
            <div className="lg:col-span-3">
              <CalendarView />
            </div>
            
            <div className="space-y-6">
              <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-100">
                <h2 className="font-medium text-lg mb-3">Calendar Tips</h2>
                <ul className="space-y-2 text-sm">
                  <li className="flex items-start gap-2">
                    <span className="bg-famacle-blue-light text-famacle-blue rounded-full p-1 mt-0.5">•</span>
                    <span>Switch between Month and Week views</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="bg-famacle-blue-light text-famacle-blue rounded-full p-1 mt-0.5">•</span>
                    <span>Click on a day to see detailed events</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="bg-famacle-blue-light text-famacle-blue rounded-full p-1 mt-0.5">•</span>
                    <span>Set priority levels for important activities</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="bg-famacle-blue-light text-famacle-blue rounded-full p-1 mt-0.5">•</span>
                    <span>Create recurring events for regular activities</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="bg-famacle-blue-light text-famacle-blue rounded-full p-1 mt-0.5">•</span>
                    <span>Add reminders to get notified before events</span>
                  </li>
                </ul>
              </div>
              
              <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-100">
                <h2 className="font-medium text-lg mb-3">Priority Legend</h2>
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <span className="block w-3 h-3 bg-famacle-coral rounded-full"></span>
                    <span className="text-sm">High Priority</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="block w-3 h-3 bg-famacle-blue rounded-full"></span>
                    <span className="text-sm">Medium Priority</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="block w-3 h-3 bg-famacle-slate-light rounded-full"></span>
                    <span className="text-sm">Low Priority</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
      
      {/* Add Event Modal */}
      <Dialog open={openAddEvent} onOpenChange={setOpenAddEvent}>
        <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Create New Event</DialogTitle>
            <DialogDescription>
              Fill in the details below to add a new event to your calendar.
            </DialogDescription>
          </DialogHeader>
          <EventForm 
            onSubmit={handleCreateEvent}
            onCancel={() => setOpenAddEvent(false)}
            isPending={isPending}
          />
        </DialogContent>
      </Dialog>
      
      <Toaster />
    </div>
  );
};

export default CalendarPage;
