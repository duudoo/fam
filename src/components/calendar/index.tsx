
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import CalendarNav from './CalendarNav';
import MonthView from './MonthView';
import WeekView from './WeekView';
import { useCalendarEvents } from '@/hooks/useCalendarEvents';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { LinkIcon } from 'lucide-react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import EventForm from './EventForm';
import useAuth from '@/hooks/useAuth';

const CalendarView = () => {
  const { 
    events, 
    selectedDate,
    setSelectedDate,
    view,
    setView,
    isLoading,
    createEvent,
    isPending
  } = useCalendarEvents();
  
  const { user } = useAuth();
  const [dateSelected, setDateSelected] = useState(false);
  const [openAddEvent, setOpenAddEvent] = useState(false);

  // Reset dateSelected flag when view changes
  useEffect(() => {
    setDateSelected(false);
  }, [view]);

  const toggleView = () => {
    setView(view === 'month' ? 'week' : 'month');
    setDateSelected(false); // Reset selection when toggling views
  };
  
  // Handler for day clicks in any view
  const handleDayClick = (date: Date) => {
    console.log('Day clicked:', date);
    setSelectedDate(date);
    setDateSelected(true);
  };
  
  // Update the date handler for navigation
  const handleDateChange = (date: Date) => {
    console.log('Setting new date:', date);
    setSelectedDate(date);
    
    // Keep the dateSelected state if only navigating months/weeks
    // without explicitly clicking on a new day
  };
  
  const handleAddEvent = () => {
    setOpenAddEvent(true);
  };
  
  const handleCreateEvent = (formData: any) => {
    if (!user?.id) {
      console.error("User ID not found");
      return;
    }
    
    // Calculate start and end dates based on form data
    const startDate = new Date(
      formData.date.getFullYear(),
      formData.date.getMonth(),
      formData.date.getDate(),
      formData.allDay ? 0 : parseInt(formData.startTime.split(':')[0]),
      formData.allDay ? 0 : parseInt(formData.startTime.split(':')[1])
    );
    
    const endDate = formData.allDay 
      ? null 
      : new Date(
          formData.date.getFullYear(),
          formData.date.getMonth(),
          formData.date.getDate(),
          parseInt(formData.endTime.split(':')[0]),
          parseInt(formData.endTime.split(':')[1])
        );
    
    // Prepare reminders if enabled
    const reminders = [];
    if (formData.reminder) {
      const reminderMinutes = parseInt(formData.reminderTime);
      const reminderTime = new Date(startDate.getTime() - (reminderMinutes * 60 * 1000));
      
      reminders.push({
        id: '', // Will be generated by backend
        time: reminderTime.toISOString(),
        type: formData.reminderType,
        sent: false
      });
    }
    
    const newEvent = {
      title: formData.title,
      description: formData.description,
      startDate: startDate.toISOString(),
      endDate: endDate ? endDate.toISOString() : null,
      allDay: formData.allDay,
      location: formData.location,
      priority: formData.priority,
      recurring: formData.isRecurring ? {
        type: formData.recurrenceType,
        endsOn: formData.recurrenceEndsOn ? formData.recurrenceEndsOn.toISOString() : null
      } : null,
      reminders: reminders
    };

    createEvent(newEvent, user.id);
    setOpenAddEvent(false);
  };
  
  return (
    <motion.div 
      className="space-y-4 overflow-hidden"
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-4">
        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4">
          <CalendarNav 
            date={selectedDate}
            view={view}
            setDate={handleDateChange}
            toggleView={toggleView}
          />
          
          <Link to="/settings?tab=calendar" className="mt-2 sm:mt-0">
            <Button variant="outline" size="sm" className="text-famacle-slate flex items-center gap-1">
              <LinkIcon size={14} />
              Sync Calendars
            </Button>
          </Link>
        </div>
        
        {isLoading ? (
          <div className="flex justify-center items-center h-96">
            <div className="text-famacle-slate animate-spin h-8 w-8 border-4 border-famacle-blue border-t-transparent rounded-full"></div>
          </div>
        ) : (
          <motion.div
            key={`calendar-${view}-${selectedDate.toISOString()}`}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.2 }}
            className="mt-4"
          >
            {view === 'month' ? (
              <MonthView 
                date={selectedDate}
                setDate={handleDayClick}
                events={events}
                showDayEvents={dateSelected}
                onAddEvent={handleAddEvent}
              />
            ) : (
              <WeekView 
                date={selectedDate}
                events={events}
                onDayClick={handleDayClick}
                onAddEvent={handleAddEvent}
              />
            )}
          </motion.div>
        )}
      </div>
      
      {/* Add Event Modal */}
      <Dialog open={openAddEvent} onOpenChange={setOpenAddEvent}>
        <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Create New Event</DialogTitle>
            <DialogDescription>
              Fill in the details below to add a new event to your calendar.
            </DialogDescription>
          </DialogHeader>
          <EventForm 
            onSubmit={handleCreateEvent}
            onCancel={() => setOpenAddEvent(false)}
            isPending={isPending}
          />
        </DialogContent>
      </Dialog>
    </motion.div>
  );
};

export default CalendarView;
