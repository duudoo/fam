import { isSameDay } from 'date-fns';
import { Event } from '@/utils/types';
import { TooltipProvider } from '@/components/ui/tooltip';
import CalendarWrapper from './month/CalendarWrapper';
import SelectedDayEvents from './month/SelectedDayEvents';
import UpcomingEvents from './UpcomingEvents';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import EventForm from './EventForm';
import { useState } from 'react';
import { useCalendarEvents } from '@/hooks/useCalendarEvents';
import useAuth from '@/hooks/useAuth';

interface MonthViewProps {
  date: Date;
  setDate: (date: Date) => void;
  events: Event[];
  showDayEvents?: boolean;
  onAddEvent?: () => void;
  onResetDaySelection?: () => void;
  onEditEvent?: (event: Event) => void;
}

const MonthView = ({ 
  date, 
  setDate, 
  events, 
  showDayEvents = false, 
  onAddEvent,
  onResetDaySelection,
  onEditEvent
}: MonthViewProps) => {
  const [editEventDialogOpen, setEditEventDialogOpen] = useState(false);
  const [currentEvent, setCurrentEvent] = useState<Event | null>(null);
  const { updateEvent, deleteEvent, isPending } = useCalendarEvents();
  const { user } = useAuth();
  
  // Helper function to get events for a specific date
  const getEventsByDate = (day: Date) => {
    return events.filter(event => {
      const eventStartDate = new Date(event.startDate);
      const eventEndDate = event.endDate ? new Date(event.endDate) : eventStartDate;
      
      return event.allDay 
        ? isSameDay(eventStartDate, day)
        : isSameDay(eventStartDate, day) || isSameDay(eventEndDate, day);
    });
  };
  
  // Handler for day clicks
  const handleDayClick = (day: Date) => {
    setDate(day);
  };
  
  const handleEditEvent = (event: Event) => {
    setCurrentEvent(event);
    setEditEventDialogOpen(true);
  };
  
  const handleUpdateEvent = (formData: any) => {
    if (!currentEvent) return;
    
    // Calculate start and end dates based on form data
    const startDate = new Date(
      formData.date.getFullYear(),
      formData.date.getMonth(),
      formData.date.getDate(),
      formData.allDay ? 0 : parseInt(formData.startTime.split(':')[0]),
      formData.allDay ? 0 : parseInt(formData.startTime.split(':')[1])
    );
    
    const endDate = formData.allDay 
      ? null 
      : new Date(
          formData.date.getFullYear(),
          formData.date.getMonth(),
          formData.date.getDate(),
          parseInt(formData.endTime.split(':')[0]),
          parseInt(formData.endTime.split(':')[1])
        );
    
    // Prepare reminders if enabled
    const reminders = [];
    if (formData.reminder) {
      const reminderMinutes = parseInt(formData.reminderTime);
      const reminderTime = new Date(startDate.getTime() - (reminderMinutes * 60 * 1000));
      
      reminders.push({
        id: '', // Will be generated by backend
        time: reminderTime.toISOString(),
        type: formData.reminderType,
        sent: false
      });
    }
    
    // Create updated event object
    const updatedEvent = {
      id: currentEvent.id,
      title: formData.title,
      description: formData.description,
      startDate: startDate.toISOString(),
      endDate: endDate ? endDate.toISOString() : undefined,
      allDay: formData.allDay,
      location: formData.location,
      priority: formData.priority,
      recurring: formData.isRecurring ? {
        type: formData.recurrenceType,
        endsOn: formData.recurrenceEndsOn ? formData.recurrenceEndsOn.toISOString() : undefined
      } : undefined,
      reminders: reminders
    };

    updateEvent(updatedEvent);
    setEditEventDialogOpen(false);
    setCurrentEvent(null);
  };
  
  const handleDeleteEvent = (eventId: string) => {
    deleteEvent(eventId);
  };
  
  const todayEvents = getEventsByDate(date);

  return (
    <TooltipProvider>
      <div className="grid grid-cols-1 md:grid-cols-7 gap-6">
        <div className="md:col-span-4">
          <CalendarWrapper
            date={date}
            events={events}
            onDayClick={handleDayClick}
            getEventsByDate={getEventsByDate}
          />
        </div>
        
        <div className="md:col-span-3">
          {showDayEvents ? (
            <SelectedDayEvents 
              date={date} 
              events={todayEvents} 
              onAddEvent={onAddEvent}
              onBackToUpcoming={onResetDaySelection}
              onEditEvent={handleEditEvent}
              onDeleteEvent={handleDeleteEvent}
            />
          ) : (
            <UpcomingEvents 
              events={events} 
              limit={4} 
              alwaysShowToggle={true}
              onEditEvent={handleEditEvent}
              onDeleteEvent={handleDeleteEvent}
            />
          )}
        </div>
      </div>
      
      {/* Edit Event Dialog */}
      {currentEvent && (
        <Dialog open={editEventDialogOpen} onOpenChange={setEditEventDialogOpen}>
          <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Edit Event</DialogTitle>
              <DialogDescription>
                Update the details for this event.
              </DialogDescription>
            </DialogHeader>
            <EventForm 
              onSubmit={handleUpdateEvent}
              onCancel={() => setEditEventDialogOpen(false)}
              isPending={isPending}
              initialValues={{
                title: currentEvent.title,
                description: currentEvent.description || '',
                date: new Date(currentEvent.startDate),
                startTime: new Date(currentEvent.startDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false }),
                endTime: currentEvent.endDate 
                  ? new Date(currentEvent.endDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false })
                  : new Date(new Date(currentEvent.startDate).getTime() + 60 * 60 * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false }),
                allDay: currentEvent.allDay,
                location: currentEvent.location || '',
                priority: currentEvent.priority,
                isRecurring: Boolean(currentEvent.recurring),
                recurrenceType: currentEvent.recurring?.type || 'daily',
                recurrenceEndsOn: currentEvent.recurring?.endsOn ? new Date(currentEvent.recurring.endsOn) : undefined,
                reminder: currentEvent.reminders && currentEvent.reminders.length > 0,
                reminderTime: currentEvent.reminders && currentEvent.reminders.length > 0 
                  ? '30' // Default value, we'd need to calculate this from the actual reminder time
                  : '30',
                reminderType: currentEvent.reminders && currentEvent.reminders.length > 0
                  ? currentEvent.reminders[0].type 
                  : 'email'
              }}
            />
          </DialogContent>
        </Dialog>
      )}
    </TooltipProvider>
  );
};

export default MonthView;
