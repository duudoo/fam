
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import EventForm from './EventForm';
import { useCalendarEvents } from '@/hooks/useCalendarEvents';
import useAuth from '@/hooks/useAuth';
import { Event } from '@/utils/types';
import { FormValues } from './form/EventFormSchema';

interface AddEventDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  eventToEdit?: Event;
}

const AddEventDialog = ({ open, onOpenChange, eventToEdit }: AddEventDialogProps) => {
  const { createEvent, updateEvent, isPending } = useCalendarEvents();
  const { user } = useAuth();

  // Map event data to form values for editing
  const mapEventToFormValues = (): FormValues | undefined => {
    if (!eventToEdit) return undefined;
    
    const formValues: FormValues = {
      title: eventToEdit.title,
      description: eventToEdit.description || "",
      date: new Date(eventToEdit.startDate),
      allDay: eventToEdit.allDay,
      priority: eventToEdit.priority,
      location: eventToEdit.location || "",
      
      // Time handling
      startTime: eventToEdit.allDay ? "00:00" : 
        new Date(eventToEdit.startDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false }),
      
      endTime: eventToEdit.allDay || !eventToEdit.endDate ? "00:00" : 
        new Date(eventToEdit.endDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false }),
      
      // Recurring settings
      isRecurring: !!eventToEdit.recurring,
      recurrenceType: eventToEdit.recurring?.type || "weekly",
      recurrenceEndsOn: eventToEdit.recurring?.endsOn ? new Date(eventToEdit.recurring.endsOn) : undefined,
      
      // Reminder settings
      reminder: eventToEdit.reminders.length > 0,
      reminderTime: eventToEdit.reminders.length > 0 ? "30" : undefined, // Default to 30 minutes
      reminderType: eventToEdit.reminders.length > 0 ? eventToEdit.reminders[0].type : "push",
    };
    
    return formValues;
  };

  const handleSubmit = (formData: FormValues) => {
    if (!user?.id) {
      console.error("User ID not found");
      return;
    }
    
    // Calculate start and end dates based on form data
    const startDate = new Date(
      formData.date.getFullYear(),
      formData.date.getMonth(),
      formData.date.getDate(),
      formData.allDay ? 0 : parseInt(formData.startTime?.split(':')[0] || "0"),
      formData.allDay ? 0 : parseInt(formData.startTime?.split(':')[1] || "0")
    );
    
    const endDate = formData.allDay 
      ? null 
      : new Date(
          formData.date.getFullYear(),
          formData.date.getMonth(),
          formData.date.getDate(),
          parseInt(formData.endTime?.split(':')[0] || "0"),
          parseInt(formData.endTime?.split(':')[1] || "0")
        );
    
    // Prepare reminders if enabled
    const reminders = [];
    if (formData.reminder) {
      const reminderMinutes = parseInt(formData.reminderTime || "30");
      const reminderTime = new Date(startDate.getTime() - (reminderMinutes * 60 * 1000));
      
      reminders.push({
        id: '', // Will be generated by backend
        time: reminderTime.toISOString(),
        type: formData.reminderType || "push",
        sent: false
      });
    }
    
    const eventData = {
      title: formData.title,
      description: formData.description,
      startDate: startDate.toISOString(),
      endDate: endDate ? endDate.toISOString() : null,
      allDay: formData.allDay,
      location: formData.location,
      priority: formData.priority,
      recurring: formData.isRecurring ? {
        type: formData.recurrenceType,
        endsOn: formData.recurrenceEndsOn ? formData.recurrenceEndsOn.toISOString() : null
      } : null,
      reminders: reminders
    };

    if (eventToEdit) {
      updateEvent({ id: eventToEdit.id, ...eventData });
    } else {
      createEvent(eventData, user.id);
    }
    
    onOpenChange(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>{eventToEdit ? 'Edit Event' : 'Create New Event'}</DialogTitle>
          <DialogDescription>
            {eventToEdit 
              ? 'Update the details of your calendar event.' 
              : 'Fill in the details below to add a new event to your calendar.'}
          </DialogDescription>
        </DialogHeader>
        <EventForm 
          onSubmit={handleSubmit}
          onCancel={() => onOpenChange(false)}
          isPending={isPending}
          initialValues={mapEventToFormValues()}
        />
      </DialogContent>
    </Dialog>
  );
};

export default AddEventDialog;
