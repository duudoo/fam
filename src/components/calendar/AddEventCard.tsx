
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { PlusCircle, Calendar, Clock, MapPin, Repeat, Bell } from 'lucide-react';
import EventForm from './EventForm';
import { useCalendarEvents } from '@/hooks/useCalendarEvents';
import useAuth from '@/hooks/useAuth';
import { motion } from 'framer-motion';

const AddEventCard = () => {
  const [open, setOpen] = useState(false);
  const { createEvent, isPending } = useCalendarEvents();
  const { user } = useAuth();

  const handleCreateEvent = (formData: any) => {
    if (!user?.id) {
      console.error("User ID not found");
      return;
    }
    
    // Calculate start and end dates based on form data
    const startDate = new Date(
      formData.date.getFullYear(),
      formData.date.getMonth(),
      formData.date.getDate(),
      formData.allDay ? 0 : parseInt(formData.startTime.split(':')[0]),
      formData.allDay ? 0 : parseInt(formData.startTime.split(':')[1])
    );
    
    const endDate = formData.allDay 
      ? null 
      : new Date(
          formData.date.getFullYear(),
          formData.date.getMonth(),
          formData.date.getDate(),
          parseInt(formData.endTime.split(':')[0]),
          parseInt(formData.endTime.split(':')[1])
        );
    
    // Prepare reminders if enabled
    const reminders = [];
    if (formData.reminder) {
      const reminderMinutes = parseInt(formData.reminderTime);
      const reminderTime = new Date(startDate.getTime() - (reminderMinutes * 60 * 1000));
      
      reminders.push({
        id: '', // Will be generated by backend
        time: reminderTime.toISOString(),
        type: formData.reminderType,
        sent: false
      });
    }
    
    const newEvent = {
      title: formData.title,
      description: formData.description,
      startDate: startDate.toISOString(),
      endDate: endDate ? endDate.toISOString() : null,
      allDay: formData.allDay,
      location: formData.location,
      priority: formData.priority,
      recurring: formData.isRecurring ? {
        type: formData.recurrenceType,
        endsOn: formData.recurrenceEndsOn ? formData.recurrenceEndsOn.toISOString() : null
      } : null,
      reminders: reminders
    };

    createEvent(newEvent, user.id);
    setOpen(false);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3, delay: 0.2 }}
    >
      <Card className="bg-white border border-gray-200 shadow-sm hover:shadow-md transition-all">
        <CardHeader className="pb-2">
          <CardTitle className="text-lg flex items-center text-famacle-slate">
            <Calendar className="w-5 h-5 mr-2 text-famacle-blue" />
            Create New Event
          </CardTitle>
          <CardDescription>Schedule activities, appointments or important dates</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 sm:grid-cols-4 gap-4 mb-4">
            <div className="flex flex-col items-center justify-center p-3 bg-famacle-blue-light/20 rounded-lg">
              <Clock className="h-8 w-8 mb-2 text-famacle-blue" />
              <p className="text-sm text-center">Schedule events</p>
            </div>
            <div className="flex flex-col items-center justify-center p-3 bg-famacle-blue-light/20 rounded-lg">
              <MapPin className="h-8 w-8 mb-2 text-famacle-blue" />
              <p className="text-sm text-center">Add location details</p>
            </div>
            <div className="flex flex-col items-center justify-center p-3 bg-famacle-blue-light/20 rounded-lg">
              <Repeat className="h-8 w-8 mb-2 text-famacle-blue" />
              <p className="text-sm text-center">Create recurring events</p>
            </div>
            <div className="flex flex-col items-center justify-center p-3 bg-famacle-blue-light/20 rounded-lg">
              <Bell className="h-8 w-8 mb-2 text-famacle-blue" />
              <p className="text-sm text-center">Set reminders</p>
            </div>
          </div>
          
          <div className="flex flex-wrap gap-2 mt-4">
            <Badge className="bg-famacle-coral text-white border-0">High Priority</Badge>
            <Badge className="bg-famacle-blue text-white border-0">Medium Priority</Badge>
            <Badge className="bg-famacle-slate-light text-white border-0">Low Priority</Badge>
          </div>
        </CardContent>
        <CardFooter>
          <Dialog open={open} onOpenChange={setOpen}>
            <DialogTrigger asChild>
              <Button className="w-full bg-famacle-blue hover:bg-famacle-blue/90" disabled={isPending}>
                <PlusCircle className="mr-2 h-4 w-4" />
                Add New Event
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[550px]">
              <DialogHeader>
                <DialogTitle>Create New Event</DialogTitle>
                <DialogDescription>
                  Fill in the details below to add a new event to your calendar.
                </DialogDescription>
              </DialogHeader>
              <EventForm 
                onSubmit={handleCreateEvent}
                onCancel={() => setOpen(false)}
                isPending={isPending}
              />
            </DialogContent>
          </Dialog>
        </CardFooter>
      </Card>
    </motion.div>
  );
};

export default AddEventCard;
