
import { useState } from 'react';
import { Link } from 'react-router-dom';
import { Calendar, ChevronRight, Plus } from 'lucide-react';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { format, parseISO, isToday } from 'date-fns';
import { cn } from '@/lib/utils';
import { useAuth } from '@/hooks/useAuth';
import { useCalendarEvents } from '@/hooks/useCalendarEvents';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import EventDialogContent from '@/components/calendar/EventDialogContent';
import { FormValues } from '@/components/calendar/form/EventFormSchema';

const UpcomingEventsCard = () => {
  const { user } = useAuth();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const { createEvent, isPending, events = [], isLoading } = useCalendarEvents();
  
  // Filter to show only upcoming events (starting from today)
  const upcomingEvents = events
    .filter(event => {
      const eventDate = new Date(event.startDate);
      return eventDate >= new Date();
    })
    .sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime())
    .slice(0, 3); // Limit to 3 events

  const handleCreateEvent = (formData: FormValues) => {
    if (!user?.id) {
      console.error("User ID not found");
      return;
    }
    
    // Calculate start and end dates based on form data
    const startDate = new Date(
      formData.date.getFullYear(),
      formData.date.getMonth(),
      formData.date.getDate(),
      formData.allDay ? 0 : parseInt(formData.startTime.split(':')[0]),
      formData.allDay ? 0 : parseInt(formData.startTime.split(':')[1])
    );
    
    const endDate = formData.allDay 
      ? null 
      : new Date(
          formData.date.getFullYear(),
          formData.date.getMonth(),
          formData.date.getDate(),
          parseInt(formData.endTime.split(':')[0]),
          parseInt(formData.endTime.split(':')[1])
        );
    
    // Prepare reminders if enabled
    const reminders = [];
    if (formData.reminder) {
      const reminderMinutes = parseInt(formData.reminderTime);
      const reminderTime = new Date(startDate.getTime() - (reminderMinutes * 60 * 1000));
      
      reminders.push({
        id: '', // Will be generated by backend
        time: reminderTime.toISOString(),
        type: formData.reminderType,
        sent: false
      });
    }
    
    const newEvent = {
      title: formData.title,
      description: formData.description,
      startDate: startDate.toISOString(),
      endDate: endDate ? endDate.toISOString() : null,
      allDay: formData.allDay,
      location: formData.location,
      priority: formData.priority,
      recurring: formData.isRecurring ? {
        type: formData.recurrenceType,
        endsOn: formData.recurrenceEndsOn ? formData.recurrenceEndsOn.toISOString() : null
      } : null,
      reminders: reminders
    };

    createEvent(newEvent, user.id);
    setIsCreateDialogOpen(false);
  };
    
  return (
    <Card>
      <CardHeader>
        <div className="flex justify-between items-center">
          <CardTitle className="text-xl font-semibold">Upcoming Events</CardTitle>
          <Button variant="ghost" size="sm" asChild>
            <Link to="/calendar" className="flex items-center text-famacle-blue">
              Calendar
              <ChevronRight className="h-4 w-4 ml-1" />
            </Link>
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="flex justify-center py-6">
            <div className="animate-spin h-6 w-6 border-4 border-famacle-blue border-t-transparent rounded-full"></div>
          </div>
        ) : (
          <div className="space-y-4">
            {upcomingEvents.length > 0 ? (
              upcomingEvents.map(event => {
                const eventDate = parseISO(event.startDate);
                const isEventToday = isToday(eventDate);
                
                return (
                  <div 
                    key={event.id} 
                    className={cn(
                      "p-3 rounded-lg border",
                      isEventToday 
                        ? "border-famacle-coral bg-famacle-coral-light/30" 
                        : "border-gray-200"
                    )}
                  >
                    <div className="flex justify-between items-start">
                      <div>
                        <h4 className="font-medium">
                          {event.title}
                          {isEventToday && (
                            <Badge className="ml-2 bg-famacle-coral text-white">Today</Badge>
                          )}
                        </h4>
                        <p className="text-sm text-gray-500">
                          {format(parseISO(event.startDate), 'EEE, MMM d')}
                          {!event.allDay && ` â€¢ ${format(parseISO(event.startDate), 'h:mm a')}`}
                        </p>
                        {event.location && (
                          <p className="text-sm text-gray-500 mt-1">{event.location}</p>
                        )}
                      </div>
                      <div className={cn(
                        "flex items-center justify-center rounded-full w-8 h-8",
                        event.priority === 'high' 
                          ? "bg-famacle-coral-light text-famacle-coral" 
                          : event.priority === 'medium'
                            ? "bg-famacle-blue-light text-famacle-blue"
                            : "bg-gray-100 text-gray-500"
                      )}>
                        {event.priority === 'high' ? (
                          <Calendar className="w-4 h-4" />
                        ) : (
                          <Calendar className="w-4 h-4" />
                        )}
                      </div>
                    </div>
                  </div>
                );
              })
            ) : (
              <div className="text-center py-6">
                <Calendar className="w-10 h-10 text-gray-300 mx-auto mb-2" />
                <p className="text-gray-500">No upcoming events</p>
              </div>
            )}
          </div>
        )}
      </CardContent>
      <CardFooter className="border-t pt-4">
        <Button 
          variant="outline" 
          className="w-full"
          onClick={() => setIsCreateDialogOpen(true)}
        >
          <Plus className="w-4 h-4 mr-2" />
          New Event
        </Button>
      </CardFooter>

      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
        <DialogContent className="sm:max-w-[550px]">
          <DialogHeader>
            <DialogTitle>Create New Event</DialogTitle>
            <DialogDescription>
              Fill in the details below to add a new event to your calendar.
            </DialogDescription>
          </DialogHeader>
          <EventDialogContent 
            isEditing={false}
            onSubmit={handleCreateEvent}
            onCancel={() => setIsCreateDialogOpen(false)}
            isPending={isPending}
          />
        </DialogContent>
      </Dialog>
    </Card>
  );
};

export default UpcomingEventsCard;
